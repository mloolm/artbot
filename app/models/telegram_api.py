import httpx
import os
from typing import List, Dict, Optional, Any
import json

# üî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –≤–∞—à–µ–º .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/"
client = httpx.AsyncClient(base_url=TELEGRAM_API_URL)
TEMPLATE_DIR = '/app/tlg_templates'
COMMAND_DESCRIPTIONS = {
    "instructions": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
    "personal_data": "–û–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
}

def get_api_url():
    return TELEGRAM_API_URL

def get_httpx_client():
    return httpx.AsyncClient(base_url=TELEGRAM_API_URL)

async def send_text_message(chat_id: int, text: str, parse_mode: str = "HTML") -> Optional[dict]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç."""
    url = "sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    try:
        response = await client.post(url, data=payload)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.response.text}")
        return None


async def send_document_to_chat(chat_id: int, document_content: bytes, filename: str, caption: str) -> Optional[dict]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç) —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram-—á–∞—Ç."""
    url = "sendDocument"
    files = {
        # httpx –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏ –¥–ª—è multipart/form-data: (filename, content, mime_type)
        "document": (filename, document_content, "application/pdf")
    }
    payload = {
        "chat_id": chat_id,
        "caption": caption
    }

    try:
        response = await client.post(url, data=payload, files=files)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e.response.text}")
        return None


async def set_webhook(url: str, secret_token: str) -> Optional[dict]:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram Webhook –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.

    :param url: –ü–æ–ª–Ω—ã–π HTTPS URL, –∫—É–¥–∞ Telegram –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'https://yourdomain.com/telegram/webhook/').
    :param secret_token: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token.
    """

    url = url.strip()

    endpoint = "setWebhook"
    payload = {
        "url": url,
        "secret_token": secret_token
    }

    try:
        response = await client.post(endpoint, data=payload)
        response.raise_for_status()
        result = response.json()

        if result.get("ok"):
            print(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {url}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook: {result.get('description')} {url} {secret_token}")

        return result

    except httpx.HTTPStatusError as e:
        print(f"üî• –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e.response.text} {url}")
        return None
    except Exception as e:
        print(f"üî• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e} {url}")
        return None


async def set_twa_menu_button_global(
        twa_url: str,
        button_text: str = "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' (Web App) –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.
    """

    twa_url = twa_url.strip()
    url = TELEGRAM_API_URL + "setChatMenuButton"

    menu_button_data = {
        "type": "web_app",
        "text": button_text,
        "web_app": {
            "url": twa_url
        }
    }

    # –í API Bot Telegram —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä 'menu_button' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω
    # –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–ª—è 'data' –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ requests (httpx)
    payload = {
        "menu_button": menu_button_data
    }

    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'setChatMenuButton' –±–µ–∑ chat_id –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏.

    try:
        async with httpx.AsyncClient() as client:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ JSON
            response = await client.post(url, json=payload)
            response.raise_for_status()
            result = response.json()

            if result.get("ok"):
                print(f"‚úÖ Menu Button TWA —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ ({button_text}).")
            else:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API Telegram –≤–µ—Ä–Ω–µ—Ç 'ok: false'
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Menu Button: {result.get('description')}")

            return result

    except httpx.HTTPStatusError as e:
        print(f"üî• –û—à–∏–±–∫–∞ HTTP ({e.response.status_code}) –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Menu Button: {e.response.text}")
        return None
    except httpx.RequestError as e:
        print(f"üåç –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ—Ç—å/DNS) –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Menu Button: {e}")
        return None


def _scan_template_commands() -> Optional[List[str]]:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —à–∞–±–ª–æ–Ω–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–æ–º–∞–Ω–¥ (–±–µ–∑ —Å–ª–µ—à–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    if not os.path.exists(TEMPLATE_DIR):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {TEMPLATE_DIR}")
        return None

    command_names: List[str] = []
    try:
        for filename in os.listdir(TEMPLATE_DIR):
            if filename.endswith(".html"):
                command_name = filename[:-5]
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
                if command_name.lower() in ("base"):
                    continue
                command_names.append(command_name)

        return command_names

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return None


# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def set_bot_commands_from_templates(client: httpx.AsyncClient) -> bool:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç /app/tlg_templates, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã (/–∏–º—è_—Ñ–∞–π–ª–∞),
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram —á–µ—Ä–µ–∑ API setMyCommands.
    """
    command_names = _scan_template_commands()
    if command_names is None:
        return False

    commands_list: List[Dict[str, str]] = []


    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
    for command_name in command_names:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 'start', –µ—Å–ª–∏ –æ–Ω —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∑–∞–ª—Å—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
        if command_name.lower() == "start":
            continue

        description = COMMAND_DESCRIPTIONS.get(command_name, "–°–ª—É–∂–µ–±–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        commands_list.append({
            # API –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ë–ï–ó —Å–ª–µ—à–∞
            "command": command_name,
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
            "description": description
        })

    if not commands_list:
        print("‚ö†Ô∏è HTML-—à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.")
        return False

    # 2. –í—ã–∑–æ–≤ Telegram API (setMyCommands)
    url = TELEGRAM_API_URL + "setMyCommands"
    payload = {
        "commands": commands_list
    }

    print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(commands_list)} –∫–æ–º–∞–Ω–¥ –≤ Telegram API...")

    try:
        response = await client.post(url, json=payload)
        response.raise_for_status()
        response_data = response.json()

        if response_data.get("ok"):
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ setMyCommands: {response_data.get('description')}")
            return False

    except Exception as e:
        print(f"üî• –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False


async def send_menu_keyboard(chat_id: int, client: httpx.AsyncClient, row_limit: int = 2) -> bool:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ReplyKeyboardMarkup –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π" –≤ —á–∞—Ç–µ.
    """
    command_names = _scan_template_commands()
    if command_names is None:
        return False

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–æ–ø–∏—Å–∞–Ω–∏–µ–º) ---
    keyboard_buttons: List[str] = []

    for name in command_names:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è COMMAND_DESCRIPTIONS.
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å–æ —Å–ª–µ—à–µ–º –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.
        description = COMMAND_DESCRIPTIONS.get(name, f"/{name}")
        keyboard_buttons.append(description)

    # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ReplyKeyboardMarkup ---
    keyboard_rows: List[List[str]] = []
    current_row: List[str] = []

    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É /start (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    start_text = COMMAND_DESCRIPTIONS.get("start", "/start")


    # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ä—è–¥–∞–º
    for button_text in keyboard_buttons:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ "/start" —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø–∞–ª–æ —Å—é–¥–∞
        if button_text == start_text:
            continue

        if len(current_row) >= row_limit:
            keyboard_rows.append(current_row)
            current_row = []

        current_row.append(button_text)

    if current_row:
        keyboard_rows.append(current_row)

    reply_markup = {
        "keyboard": keyboard_rows,
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ---
    url = "sendMessage"
    response_payload = {
        "chat_id": chat_id,
        "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—ã–≤–æ–∑ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.\n\n–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ç—É—Ç /instructions",
        "parse_mode": "Markdown",
        "reply_markup": reply_markup
    }

    try:
        response = await client.post(url, json=response_payload)
        response.raise_for_status()

        if response.json().get("ok"):
            print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}.")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {response.json().get('description')}")
            return False

    except Exception as e:
        print(f"üî• –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
        return False


async def set_bot_config():
    url = f"{os.getenv('BACK_URL')}/telegram/webhook/"
    await set_webhook(url, TELEGRAM_BOT_TOKEN)

    front_url = os.getenv('FRONT_URL')
    await set_twa_menu_button_global(front_url, '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ')
    await set_bot_commands_from_templates(get_httpx_client())
