# telegram_helpers.py
import httpx
import os
from typing import Optional
from typing import List, Dict, Any

# üî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –≤–∞—à–µ–º .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/"
client = httpx.AsyncClient(base_url=TELEGRAM_API_URL)
TEMPLATE_DIR = '/app/tlg_templates'


async def send_text_message(chat_id: int, text: str, parse_mode: str = "HTML") -> Optional[dict]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç."""
    url = "sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    try:
        response = await client.post(url, data=payload)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.response.text}")
        return None


async def send_document_to_chat(chat_id: int, document_content: bytes, filename: str, caption: str) -> Optional[dict]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç) —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram-—á–∞—Ç."""
    url = "sendDocument"
    files = {
        # httpx –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏ –¥–ª—è multipart/form-data: (filename, content, mime_type)
        "document": (filename, document_content, "application/pdf")
    }
    payload = {
        "chat_id": chat_id,
        "caption": caption
    }

    try:
        response = await client.post(url, data=payload, files=files)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e.response.text}")
        return None


async def set_webhook(url: str, secret_token: str) -> Optional[dict]:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram Webhook –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.

    :param url: –ü–æ–ª–Ω—ã–π HTTPS URL, –∫—É–¥–∞ Telegram –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'https://yourdomain.com/telegram/webhook/').
    :param secret_token: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token.
    """
    endpoint = "setWebhook"
    payload = {
        "url": url,
        "secret_token": secret_token
    }

    try:
        response = await client.post(endpoint, data=payload)
        response.raise_for_status()
        result = response.json()

        if result.get("ok"):
            print(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {url}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook: {result.get('description')}")

        return result

    except httpx.HTTPStatusError as e:
        print(f"üî• –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e.response.text}")
        return None
    except Exception as e:
        print(f"üî• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
        return None


async def set_twa_menu_button(twa_url: str, button_text: str, chat_id: Optional[int] = None):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TWA.
    –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    url = "setChatMenuButton"

    menu_button_data = {
        "type": "web_app",
        "text": button_text,
        "web_app": {
            "url": twa_url
        }
    }

    payload = {
        "menu_button": menu_button_data
    }

    try:
        response = await client.post(url, json=payload)
        response.raise_for_status()
        result = response.json()

        if result.get("ok"):
            print(f"‚úÖ Menu Button TWA —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({button_text}).")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Menu Button: {result.get('description')}")

        return result

    except httpx.HTTPStatusError as e:
        print(f"üî• –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Menu Button: {e.response.text}")
        return None


async def set_bot_commands_from_templates():
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç /app/tlg_templates, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã (/–∏–º—è_—Ñ–∞–π–ª–∞),
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram —á–µ—Ä–µ–∑ API setMyCommands.

    –í–Ω–∏–º–∞–Ω–∏–µ: API —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –∏–º—è –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–æ –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–µ—à–∞.
    """
    commands_list: List[Dict[str, str]] = []

    descr = {
        "instructions":"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        "personal_data":"–û–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",

    }

    if not os.path.exists(TEMPLATE_DIR):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {TEMPLATE_DIR}")
        return False

    # 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    try:
        for filename in os.listdir(TEMPLATE_DIR):
            if filename.endswith(".html"):
                # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .html
                command_name = filename[:-5]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                if command_name.lower() in ("base", "start"):
                    continue

                description = ''
                if command_name in descr:
                    description = descr[command_name]
                commands_list.append({
                    # API –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ë–ï–ó —Å–ª–µ—à–∞
                    "command": command_name,
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
                    "description": description
                })

        if not commands_list:
            print("‚ö†Ô∏è HTML-—à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return False

    # 2. –í—ã–∑–æ–≤ Telegram API (setMyCommands)
    url = "setMyCommands"
    payload = {
        "commands": commands_list
    }

    print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(commands_list)} –∫–æ–º–∞–Ω–¥ –≤ Telegram API...")

    try:
        response = await client.post(url, json=payload)
        response.raise_for_status()
        response_data = response.json()

        if response_data.get("ok"):
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ setMyCommands: {response_data.get('description')}")
            return False

    except Exception as e:
        print(f"üî• –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False