# telegram_helpers.py
import httpx
import os
from typing import Optional

# üî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –≤–∞—à–µ–º .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/"
client = httpx.AsyncClient(base_url=TELEGRAM_API_URL)


async def send_text_message(chat_id: int, text: str, parse_mode: str = "HTML") -> Optional[dict]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-—á–∞—Ç."""
    url = "sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    try:
        response = await client.post(url, data=payload)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.response.text}")
        return None


async def send_document_to_chat(chat_id: int, document_content: bytes, filename: str, caption: str) -> Optional[dict]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç) —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram-—á–∞—Ç."""
    url = "sendDocument"
    files = {
        # httpx –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ—Ä—Ç–µ–∂–∏ –¥–ª—è multipart/form-data: (filename, content, mime_type)
        "document": (filename, document_content, "application/pdf")
    }
    payload = {
        "chat_id": chat_id,
        "caption": caption
    }

    try:
        response = await client.post(url, data=payload, files=files)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e.response.text}")
        return None


async def set_webhook(url: str, secret_token: str) -> Optional[dict]:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram Webhook –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.

    :param url: –ü–æ–ª–Ω—ã–π HTTPS URL, –∫—É–¥–∞ Telegram –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'https://yourdomain.com/telegram/webhook/').
    :param secret_token: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token.
    """
    endpoint = "setWebhook"
    payload = {
        "url": url,
        "secret_token": secret_token
    }

    try:
        response = await client.post(endpoint, data=payload)
        response.raise_for_status()
        result = response.json()

        if result.get("ok"):
            print(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {url}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook: {result.get('description')}")

        return result

    except httpx.HTTPStatusError as e:
        print(f"üî• –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e.response.text}")
        return None
    except Exception as e:
        print(f"üî• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook: {e}")
        return None